{"version":3,"file":"index.js","mappings":";AAAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack/runtime/compat",".././dist/main.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.main = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst run_1 = require(\"./utils/run\");\nconst spacectl_1 = require(\"./commands/spacectl\");\n// Define the main function correctly\nconst main = async () => {\n    try {\n        const binaryFolder = await (0, spacectl_1.installAndGetFolder)();\n        core.addPath(binaryFolder);\n        core.info(\"Added spacectl to PATH: \" + binaryFolder);\n        await (0, run_1.run)({\n            command: core.getInput('command', { required: true }),\n            region: core.getInput('region', { required: true }),\n            env: core.getInput('env', { required: true }),\n            integration_name: core.getInput('integration_name', { required: true }),\n            service_name: core.getInput('service_name', { required: true }),\n            label_prefix: core.getInput('label_prefix', { required: true }),\n            label_postfix: core.getInput('label_postfix', { required: true }),\n        });\n    }\n    catch (e) {\n        core.setFailed(e.message);\n        console.error(e);\n    }\n};\nexports.main = main;\n// Ensure proper handling of errors in the async context\nmain().catch((e) => {\n    core.setFailed(e.message);\n    console.error(e);\n});\n"],"names":[],"sourceRoot":""}